#!/usr/bin/env node

import { promises as fs } from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

const args = process.argv.slice(2);

if (args.length === 0) {
  console.error('Usage: node tools/generate-import-sweep.mjs <module...>');
  process.exit(1);
}

const targetDir = path.join(projectRoot, 'src', '__diagnose__');
const targetFile = path.join(targetDir, 'imports.spec.ts');

const banner = `/**\n * AUTO-GENERATED by tools/generate-import-sweep.mjs\n * Modules: ${args.join(', ')}\n */`;
const modulesArray = args
  .map((mod) => mod.trim())
  .filter(Boolean)
  .map((mod) => `  '${mod}',`)
  .join('\n');

const testBlock = `import { describe, it, expect } from 'vitest';

const modules = [
${modulesArray}
];

describe('diagnostic import sweep', () => {
  it('loads modules without throwing', async () => {
    for (const mod of modules) {
      await import(mod);
    }
    expect(true).toBe(true);
  });
});
`;

const fileContents = `${banner}\n\n${testBlock}`;

await fs.mkdir(targetDir, { recursive: true });
await fs.writeFile(targetFile, fileContents, 'utf8');

const relativePath = path.relative(projectRoot, targetFile);
console.log(`Wrote ${relativePath}`);
