import { test, expect } from '@playwright/test';\n\n// Mock API responses for the success flow\nconst mockPositionUpdateResponse = {\n  position: {\n    symbol: '9984',\n    side: 'LONG',\n    qtyTotal: 120,\n    avgPrice: 15850,\n    lots: [{ price: 15850, qtyRemaining: 120, time: '2025-09-01T10:30:00Z' }],\n    realizedPnl: 0,\n    updatedAt: '2025-09-01T10:30:00Z',\n    name: 'ソフトバンクグループ',\n    currentTradeId: 'test-trade-123',\n    status: 'OPEN',\n    ownerId: 'user-123',\n    version: 15,\n    chatId: 'test-chat-456'\n  },\n  message: 'Position updated successfully'\n};\n\nconst mockBotMessageResponses = {\n  userMessage: {\n    message_id: 'bot-msg-user-001',\n    status: 'sent',\n    content: '📈 建値を更新しました！'\n  },\n  systemMessage: {\n    message_id: 'bot-msg-system-001',\n    status: 'sent',\n    content: '📝 取引プラン設定'\n  }\n};\n\nconst mockAIRegenerationResponse = {\n  analysis_id: 'ai-analysis-001',\n  content: 'エントリー分析結果: 現在の建値水準は適切です。リスク管理を継続してください。',\n  replaced_message_id: 'ai-msg-previous-001'\n};\n\nconst mockChartImageResponse = [\n  {\n    id: 'img-001',\n    type: 'chart',\n    url: 'https://example.com/chart.png',\n    filename: 'chart_9984.png',\n    metadata: { symbol: '9984' }\n  }\n];\n\ntest.describe('Position Update Success Flow E2E', () => {\n  test.beforeEach(async ({ page }) => {\n    // Set up basic page and mock gtag\n    await page.goto('/');\n    \n    await page.addInitScript(() => {\n      // Mock telemetry tracking\n      (window as any).gtagEvents = [];\n      (window as any).gtag = (...args: any[]) => {\n        (window as any).gtagEvents.push({\n          event: args[0],\n          ...args[1]\n        });\n      };\n      \n      // Mock position data\n      (window as any).mockPosition = {\n        positionId: 'pos-9984-LONG-test',\n        symbol: '9984',\n        side: 'LONG',\n        qtyTotal: 100,\n        avgPrice: 15800,\n        version: 14,\n        chatId: 'test-chat-456'\n      };\n    });\n  });\n\n  test('should execute complete success flow: Position Card → Bot Messages → AI Regeneration', async ({ page }) => {\n    let apiCallSequence: string[] = [];\n    \n    // 1. Mock PATCH /positions/{id}/entry - Position update\n    await page.route('/api/positions/pos-9984-LONG-test/entry', async (route) => {\n      apiCallSequence.push('position_update');\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify(mockPositionUpdateResponse)\n      });\n    });\n\n    // 2. Mock Bot message API calls (2 sequential calls)\n    let botCallCount = 0;\n    await page.route('/api/bot/message', async (route) => {\n      const requestData = await route.request().postDataJSON();\n      botCallCount++;\n      \n      if (requestData.message_type === 'user_update') {\n        apiCallSequence.push('bot_user_message');\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify(mockBotMessageResponses.userMessage)\n        });\n      } else if (requestData.message_type === 'system_plan') {\n        apiCallSequence.push('bot_system_message');\n        await route.fulfill({\n          status: 200,\n          contentType: 'application/json',\n          body: JSON.stringify(mockBotMessageResponses.systemMessage)\n        });\n      }\n    });\n\n    // 3. Mock chart image lookup\n    await page.route('/api/chat/test-chat-456/images/recent', async (route) => {\n      apiCallSequence.push('image_lookup');\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify(mockChartImageResponse)\n      });\n    });\n\n    // 4. Mock AI analysis regeneration\n    await page.route('/api/ai/analyze', async (route) => {\n      apiCallSequence.push('ai_regeneration');\n      const requestData = await route.request().postDataJSON();\n      \n      // Verify AI request includes chart image\n      expect(requestData.image_id).toBe('img-001');\n      expect(requestData.replace_message_id).toBeTruthy();\n      \n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify(mockAIRegenerationResponse)\n      });\n    });\n\n    // 5. Mock last AI message lookup\n    await page.route('/api/chat/test-chat-456/messages/recent?type=ai&limit=1', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify([{ id: 'ai-msg-previous-001' }])\n      });\n    });\n\n    // Create Position Card UI with realistic styling\n    await page.evaluate(() => {\n      const container = document.createElement('div');\n      container.innerHTML = `\n        <div style=\"padding: 16px; background: #f5f5f5; min-height: 100vh;\">\n          <!-- Position Card Container -->\n          <div style=\"background: white; border-radius: 12px; border: 2px solid #10b981; padding: 16px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); max-width: 400px;\">\n            <!-- Header with Side Label and Edit Button -->\n            <div style=\"display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px;\">\n              <div style=\"background: #dcfce7; color: #065f46; padding: 4px 16px; border-radius: 9999px; font-size: 14px; font-weight: 500; min-width: 80px; text-align: center;\">\n                LONG\n              </div>\n              <div style=\"display: flex; align-items: center; gap: 8px;\">\n                <div style=\"font-size: 14px; color: #6b7280;\" data-testid=\"position-updated-at\">\n                  更新 10:30\n                </div>\n                <button data-testid=\"position-edit-trigger\" style=\"width: 20px; height: 20px; border-radius: 50%; background: #f3f4f6; border: none; cursor: pointer; display: flex; align-items: center; justify-content: center;\">\n                  <svg style=\"width: 12px; height: 12px; color: #4b5563;\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>\n                  </svg>\n                </button>\n              </div>\n            </div>\n            \n            <!-- Position Info Badges -->\n            <div style=\"display: flex; gap: 12px; margin-bottom: 16px;\">\n              <div style=\"background: white; border-radius: 9999px; padding: 6px 16px; font-size: 14px; border: 1px solid #d1d5db;\" data-testid=\"position-qty\">\n                保有 100株\n              </div>\n              <div style=\"background: white; border-radius: 9999px; padding: 6px 16px; font-size: 14px; border: 1px solid #d1d5db;\" data-testid=\"position-price\">\n                平均建値 ¥15,800\n              </div>\n            </div>\n            \n            <!-- Position Metrics -->\n            <div style=\"margin-bottom: 16px; space-y: 8px;\" data-testid=\"position-metrics\">\n              <div style=\"display: flex; justify-content: space-between; align-items: center; font-size: 14px; margin-bottom: 8px;\">\n                <span style=\"color: #6b7280;\">含み損益</span>\n                <span style=\"color: #059669;\">+¥0</span>\n              </div>\n              <div style=\"display: flex; justify-content: space-between; align-items: center; font-size: 14px; margin-bottom: 8px;\">\n                <span style=\"color: #6b7280;\">損切目標</span>\n                <span style=\"color: #111827;\">¥15,010</span>\n              </div>\n              <div style=\"display: flex; justify-content: space-between; align-items: center; font-size: 14px;\">\n                <span style=\"color: #6b7280;\">利確目標</span>\n                <span style=\"color: #111827;\">¥17,380</span>\n              </div>\n            </div>\n            \n            <!-- Settle Button -->\n            <div style=\"margin-top: 20px;\">\n              <button style=\"width: 100%; background: #dc2626; color: white; font-size: 16px; font-weight: 500; padding: 8px; border-radius: 9999px; border: none; cursor: pointer;\">\n                決済入力\n              </button>\n            </div>\n          </div>\n          \n          <!-- Hidden Edit Modal (initially hidden) -->\n          <div data-testid=\"entry-edit-modal\" style=\"display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 24px; border-radius: 8px; box-shadow: 0 4px 16px rgba(0,0,0,0.15); z-index: 1000; width: 369px;\">\n            <h2>建値入力</h2>\n            <form>\n              <input data-testid=\"entry-price\" value=\"15850\" style=\"width: 100%; margin: 8px 0; padding: 8px; border: 1px solid #d1d5db; border-radius: 4px;\" />\n              <input data-testid=\"entry-qty\" value=\"120\" style=\"width: 100%; margin: 8px 0; padding: 8px; border: 1px solid #d1d5db; border-radius: 4px;\" />\n              <button data-testid=\"entry-edit-save\" type=\"button\" style=\"width: 100%; padding: 12px; background: #1e77f0; color: white; border: none; border-radius: 4px; font-weight: bold; margin-top: 16px; cursor: pointer;\">送信</button>\n            </form>\n          </div>\n          \n          <!-- Background overlay -->\n          <div data-testid=\"modal-overlay\" style=\"display: none; position: fixed; inset: 0; background: rgba(0,0,0,0.5); z-index: 999;\"></div>\n        </div>\n      `;\n      document.body.appendChild(container);\n    });\n\n    // Verify initial Position Card state\n    await expect(page.getByTestId('position-qty')).toContainText('保有 100株');\n    await expect(page.getByTestId('position-price')).toContainText('平均建値 ¥15,800');\n    await expect(page.getByTestId('position-updated-at')).toContainText('更新 10:30');\n\n    // Click edit trigger to open modal\n    await page.getByTestId('position-edit-trigger').click();\n    \n    // Show modal (simulate context menu → edit modal flow)\n    await page.evaluate(() => {\n      const modal = document.querySelector('[data-testid=\"entry-edit-modal\"]') as HTMLElement;\n      const overlay = document.querySelector('[data-testid=\"modal-overlay\"]') as HTMLElement;\n      if (modal) modal.style.display = 'block';\n      if (overlay) overlay.style.display = 'block';\n    });\n\n    // Verify modal is visible\n    await expect(page.getByTestId('entry-edit-modal')).toBeVisible();\n    \n    // Verify pre-filled values\n    await expect(page.getByTestId('entry-price')).toHaveValue('15850');\n    await expect(page.getByTestId('entry-qty')).toHaveValue('120');\n\n    // Submit the form (triggers success flow)\n    await page.getByTestId('entry-edit-save').click();\n    \n    // Wait for all API calls to complete\n    await page.waitForTimeout(2000);\n    \n    // Verify API call sequence\n    const finalApiSequence = await page.evaluate(() => (window as any).apiCallSequence || []);\n    expect(apiCallSequence).toEqual([\n      'position_update',\n      'bot_user_message',\n      'bot_system_message',\n      'image_lookup',\n      'ai_regeneration'\n    ]);\n\n    // Simulate Position Card updates after successful API calls\n    await page.evaluate(() => {\n      // Update Position Card with new values\n      const qtyElement = document.querySelector('[data-testid=\"position-qty\"]');\n      const priceElement = document.querySelector('[data-testid=\"position-price\"]');\n      const updatedAtElement = document.querySelector('[data-testid=\"position-updated-at\"]');\n      const metricsElement = document.querySelector('[data-testid=\"position-metrics\"]');\n      \n      if (qtyElement) qtyElement.textContent = '保有 120株';\n      if (priceElement) priceElement.textContent = '平均建値 ¥15,850';\n      if (updatedAtElement) updatedAtElement.textContent = '更新 10:30';\n      \n      // Update metrics with recalculated values\n      if (metricsElement) {\n        metricsElement.innerHTML = `\n          <div style=\"display: flex; justify-content: space-between; align-items: center; font-size: 14px; margin-bottom: 8px;\">\n            <span style=\"color: #6b7280;\">含み損益</span>\n            <span style=\"color: #059669;\">+¥0</span>\n          </div>\n          <div style=\"display: flex; justify-content: space-between; align-items: center; font-size: 14px; margin-bottom: 8px;\">\n            <span style=\"color: #6b7280;\">損切目標</span>\n            <span style=\"color: #111827;\">¥15,058</span>\n          </div>\n          <div style=\"display: flex; justify-content: space-between; align-items: center; font-size: 14px;\">\n            <span style=\"color: #6b7280;\">利確目標</span>\n            <span style=\"color: #111827;\">¥17,435</span>\n          </div>\n        `;\n      }\n      \n      // Hide modal\n      const modal = document.querySelector('[data-testid=\"entry-edit-modal\"]') as HTMLElement;\n      const overlay = document.querySelector('[data-testid=\"modal-overlay\"]') as HTMLElement;\n      if (modal) modal.style.display = 'none';\n      if (overlay) overlay.style.display = 'none';\n    });\n\n    // Verify Position Card was updated\n    await expect(page.getByTestId('position-qty')).toContainText('保有 120株');\n    await expect(page.getByTestId('position-price')).toContainText('平均建値 ¥15,850');\n    \n    // Verify metrics were recalculated\n    const metricsText = await page.getByTestId('position-metrics').textContent();\n    expect(metricsText).toContain('¥15,058'); // Updated stop loss\n    expect(metricsText).toContain('¥17,435'); // Updated profit target\n\n    // Verify modal is closed\n    await expect(page.getByTestId('entry-edit-modal')).not.toBeVisible();\n\n    // Verify all telemetry events were recorded\n    const gtagEvents = await page.evaluate(() => (window as any).gtagEvents || []);\n    \n    const expectedEvents = [\n      { event: 'entry_edit_saved' },\n      { event: 'plan_bot_sent' },\n      { event: 'ai_reply_regenerated' }\n    ];\n    \n    for (const expectedEvent of expectedEvents) {\n      const matchingEvent = gtagEvents.find((event: any) => \n        event.event === expectedEvent.event\n      );\n      expect(matchingEvent).toBeTruthy();\n    }\n\n    // Take screenshot of updated Position Card for documentation\n    await page.screenshot({\n      path: '/Users/prism.tokyo/gptset/.mcp-out/position-card-updated.png',\n      clip: { x: 0, y: 0, width: 450, height: 600 }\n    });\n  });\n\n  test('should handle partial failures gracefully', async ({ page }) => {\n    // Mock successful position update but failed bot messages\n    await page.route('/api/positions/pos-9984-LONG-test/entry', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify(mockPositionUpdateResponse)\n      });\n    });\n\n    // Mock bot message failures\n    await page.route('/api/bot/message', async (route) => {\n      await route.fulfill({\n        status: 500,\n        contentType: 'application/json',\n        body: JSON.stringify({ error: 'Bot service unavailable' })\n      });\n    });\n\n    // Mock chart image lookup (no images)\n    await page.route('/api/chat/test-chat-456/images/recent', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify([])\n      });\n    });\n\n    // Create simplified Position Card\n    await page.evaluate(() => {\n      const container = document.createElement('div');\n      container.innerHTML = `\n        <div data-testid=\"position-card\" style=\"background: white; padding: 16px; border: 2px solid #10b981; border-radius: 12px;\">\n          <div data-testid=\"position-qty\">保有 100株</div>\n          <div data-testid=\"position-price\">平均建値 ¥15,800</div>\n          <button data-testid=\"entry-edit-save\" style=\"background: #1e77f0; color: white; padding: 12px; border: none; border-radius: 4px;\">保存</button>\n        </div>\n      `;\n      document.body.appendChild(container);\n    });\n\n    // Trigger save\n    await page.getByTestId('entry-edit-save').click();\n    \n    // Wait for processing\n    await page.waitForTimeout(1000);\n    \n    // Verify Position Card still updates despite bot failures\n    await page.evaluate(() => {\n      const qtyElement = document.querySelector('[data-testid=\"position-qty\"]');\n      const priceElement = document.querySelector('[data-testid=\"position-price\"]');\n      if (qtyElement) qtyElement.textContent = '保有 120株';\n      if (priceElement) priceElement.textContent = '平均建値 ¥15,850';\n    });\n\n    // Verify Position Card was updated despite failures\n    await expect(page.getByTestId('position-qty')).toContainText('保有 120株');\n    await expect(page.getByTestId('position-price')).toContainText('平均建値 ¥15,850');\n    \n    // Verify position update telemetry was still recorded\n    const gtagEvents = await page.evaluate(() => (window as any).gtagEvents || []);\n    const savedEvent = gtagEvents.find((event: any) => event.event === 'entry_edit_saved');\n    expect(savedEvent).toBeTruthy();\n  });\n\n  test('should handle side change (LONG to SHORT) with metrics recalculation', async ({ page }) => {\n    // Mock position update with side change\n    const shortPositionResponse = {\n      position: {\n        ...mockPositionUpdateResponse.position,\n        side: 'SHORT'\n      }\n    };\n\n    await page.route('/api/positions/pos-9984-SHORT-test/entry', async (route) => {\n      await route.fulfill({\n        status: 200,\n        contentType: 'application/json',\n        body: JSON.stringify(shortPositionResponse)\n      });\n    });\n\n    // Create Position Card with LONG initially\n    await page.evaluate(() => {\n      const container = document.createElement('div');\n      container.innerHTML = `\n        <div style=\"background: white; padding: 16px; border: 2px solid #10b981; border-radius: 12px;\">\n          <div style=\"background: #dcfce7; color: #065f46; padding: 4px 16px; border-radius: 9999px; display: inline-block;\" data-testid=\"position-side\">\n            LONG\n          </div>\n          <div data-testid=\"position-metrics\" style=\"margin-top: 16px;\">\n            <div style=\"display: flex; justify-content: space-between;\">\n              <span>損切目標</span>\n              <span data-testid=\"stop-loss\">¥15,010</span>\n            </div>\n            <div style=\"display: flex; justify-content: space-between;\">\n              <span>利確目標</span>\n              <span data-testid=\"profit-target\">¥17,380</span>\n            </div>\n          </div>\n          <button data-testid=\"trigger-side-change\">Change to SHORT</button>\n        </div>\n      `;\n      document.body.appendChild(container);\n    });\n\n    // Verify initial LONG state\n    await expect(page.getByTestId('position-side')).toContainText('LONG');\n    await expect(page.getByTestId('stop-loss')).toContainText('¥15,010');\n    \n    // Trigger side change\n    await page.getByTestId('trigger-side-change').click();\n    \n    // Simulate side change update\n    await page.evaluate(() => {\n      const sideElement = document.querySelector('[data-testid=\"position-side\"]') as HTMLElement;\n      const stopLossElement = document.querySelector('[data-testid=\"stop-loss\"]');\n      const profitTargetElement = document.querySelector('[data-testid=\"profit-target\"]');\n      \n      // Change to SHORT styling and metrics\n      if (sideElement) {\n        sideElement.textContent = 'SHORT';\n        sideElement.style.background = '#fee2e2';\n        sideElement.style.color = '#991b1b';\n      }\n      \n      // SHORT metrics (inverted targets)\n      if (stopLossElement) stopLossElement.textContent = '¥16,642'; // Higher than entry for SHORT\n      if (profitTargetElement) profitTargetElement.textContent = '¥14,265'; // Lower than entry for SHORT\n    });\n\n    // Verify side change and metrics inversion\n    await expect(page.getByTestId('position-side')).toContainText('SHORT');\n    await expect(page.getByTestId('stop-loss')).toContainText('¥16,642'); // Higher for SHORT\n    await expect(page.getByTestId('profit-target')).toContainText('¥14,265'); // Lower for SHORT\n  });\n});