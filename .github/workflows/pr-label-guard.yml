name: pr-label-guard
on:
  workflow_run:
    workflows: ["docs-index-validate", "nfr-xref", "security-permissions-lint"]
    types: [completed]
permissions:
  contents: read
  pull-requests: write
  issues: write
jobs:
  label:
    if: ${{ github.event.workflow_run.event == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        with:
          script: |
            const path = require('path');
            const helperPath = path.join(process.env.GITHUB_WORKSPACE, '.github/scripts/ds27-check-state.js');
            const { evaluateChecks, REQUIRED_CHECKS } = require(helperPath);

            const run = context.payload.workflow_run;
            const pr = run.pull_requests?.[0];
            if (!pr) {
              core.info('DS-27: workflow run not tied to a PR; skipping label update');
              return;
            }

            const { owner, repo } = context.repo;
            let sha = run.head_sha || pr.head?.sha;
            if (!sha) {
              core.info('DS-27: resolving head SHA via API');
              try {
                const prData = await github.rest.pulls.get({ owner, repo, pull_number: pr.number });
                sha = prData.data.head.sha;
              } catch (error) {
                core.warning(`DS-27: failed to resolve head SHA (${error?.message || error})`);
              }
            }

            const issue_number = pr.number;

            const ensureLabelPresent = async () => {
              core.info('DS-27: ensuring docs:invalid label is present');
              try {
                await github.rest.issues.addLabels({ owner, repo, issue_number, labels: ['docs:invalid'] });
                core.info('DS-27: applied docs:invalid label');
              } catch (error) {
                if (error.status === 422) {
                  core.info('DS-27: docs:invalid label already present');
                } else {
                  throw error;
                }
              }
            };

            if (!sha) {
              core.warning('DS-27: missing head SHA; defaulting to keeping docs:invalid label');
              await ensureLabelPresent();
              return;
            }

            try {
              const evaluation = await evaluateChecks({ github, owner, repo, sha, requiredChecks: REQUIRED_CHECKS });

              if (evaluation.allSuccess) {
                core.info('DS-27: all required checks green; removing failure and triage labels if present');
                for (const labelName of ['docs:invalid', 'triage:urgent']) {
                  try {
                    await github.rest.issues.removeLabel({ owner, repo, issue_number, name: labelName });
                    core.info(`DS-27: removed ${labelName} label`);
                  } catch (error) {
                    if (error.status === 404) {
                      core.info(`DS-27: ${labelName} label already absent`);
                    } else {
                      throw error;
                    }
                  }
                }
              } else {
                await ensureLabelPresent();
              }
            } catch (error) {
              core.warning(`DS-27: evaluation failed (${error?.message || error}); defaulting to docs:invalid`);
              await ensureLabelPresent();
            }
