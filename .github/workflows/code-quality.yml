name: code-quality

on:
  pull_request:

jobs:
  # 1) docs-syncブランチ / [skip docsync] タイトル → No-Op Success（1行式）
  noop:
    if: ${{ (github.event_name == 'pull_request' && startsWith(github.head_ref, 'docs-sync/')) || (github.event_name != 'pull_request' && startsWith(github.ref_name, 'docs-sync/')) || (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[skip docsync]')) }}
    runs-on: ubuntu-latest
    steps:
      - run: echo 'No-Op on docs-sync/* or [skip docsync]'

  # 2) 本処理（No-Opの“否定”1行式）— Python 側
  py-quality:
    if: ${{ !(github.event_name == 'pull_request' && startsWith(github.head_ref, 'docs-sync/')) && !(github.event_name != 'pull_request' && startsWith(github.ref_name, 'docs-sync/')) && !(github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[skip docsync]')) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install --disable-pip-version-check -q -r requirements.txt -r scripts/requirements.txt -r requirements-dev.txt
      - run: pip install --disable-pip-version-check -q -e .
      - name: Preflight required imports
        run: |
          python - <<'PY'
          import importlib

          mods = ("fastapi", "pydantic_settings", "sqlalchemy")
          for m in mods:
              importlib.import_module(m)
          print("preflight ok:", ", ".join(mods))
          PY
      - run: ruff check scripts
      - run: mypy scripts
      - run: pytest -q

  # 3) 本処理（同上）— Frontend 側
  fe-quality:
    if: ${{ !(github.event_name == 'pull_request' && startsWith(github.head_ref, 'docs-sync/')) && !(github.event_name != 'pull_request' && startsWith(github.ref_name, 'docs-sync/')) && !(github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[skip docsync]')) }}
    defaults:
      run:
        working-directory: frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: |
          if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
      - run: npx tsc --noEmit
      - run: npx eslint '.'
      - run: npm test --silent

  report-failure:
    needs: [py-quality, fe-quality]
    if: ${{ always() && github.event_name == 'pull_request' && !(startsWith(github.head_ref, 'docs-sync/')) && !(contains(github.event.pull_request.title, '[skip docsync]')) && failure() }}
    runs-on: ubuntu-latest
    permissions: { contents: read, pull-requests: write, issues: write }
    steps:
      - uses: actions/checkout@v4
      - name: Report CI failure
        uses: ./.github/actions/on-failure
        with:
          pr-number: ${{ github.event.pull_request.number }}
          labels: ci:fail
          message: |
            ❌ code-quality failed.
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  report-success:
    needs: [py-quality, fe-quality]
    if: ${{ always() && github.event_name == 'pull_request' && !(startsWith(github.head_ref, 'docs-sync/')) && !(contains(github.event.pull_request.title, '[skip docsync]')) && needs.py-quality.result == 'success' && needs.fe-quality.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Clear CI failure labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            for (const name of ['ci:fail', 'triage:urgent']) {
              try {
                await github.rest.issues.removeLabel({ owner, repo, issue_number, name });
              } catch (error) {
                if (error.status === 404) {
                  core.info(`Label ${name} already absent`);
                } else {
                  throw error;
                }
              }
            }
