name: Security Permissions Lint
on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main  # release/** を保護したくなったらここに追加
    paths:
      - .github/workflows/**
      - scripts/**

permissions:
  contents: read  # top-levelは最小権限を明示

concurrency:
  group: security-permissions-lint-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
jobs:
  pr-noop:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: pull_request は No-op
        run: 'echo "PR noop (compat will overwrite seed)"'

      - name: PR向けサマリ
        run: |
          echo "## security-permissions-lint" >> $GITHUB_STEP_SUMMARY
          echo "- PR では compat 用ノップを実行します" >> $GITHUB_STEP_SUMMARY
          echo "- workflows / scripts / .github に変更がある場合のみ本処理(run-on-main)が実行されます" >> $GITHUB_STEP_SUMMARY

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.perm || 'false' }}
    steps:
      - name: Checkout
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4

      - name: Detect permissions-related changes
        if: ${{ github.event_name == 'pull_request' }}
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            perm:
              - '.github/workflows/**'
              - 'scripts/**'
              - '.github/**'

      - name: Skip change detection outside pull_request
        if: ${{ github.event_name != 'pull_request' }}
        run: echo "change detection not needed for ${{ github.event_name }}"

  run-on-main:
    needs: [detect-changes]
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || needs.detect-changes.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: python -m pip install --upgrade pip PyYAML

      - name: Run workflow permissions lint
        env:
          SEC_LINT_STRICT: "false"  # Warn運用
        run: python scripts/workflow_permissions_lint.py

      - name: Append security review report
        if: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
        run: |
          test -f docs/agile/.sec-review-row || echo "$(date +%F) | security-permissions-lint | auto | generated-by-workflow" > docs/agile/.sec-review-row
          row=$(cat docs/agile/.sec-review-row)
          echo "$row | ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> docs/agile/report.md

      - name: Create GitHub App token
        if: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' && secrets.GH_APP_ID != '' && secrets.GH_INSTALLATION_ID != '' && secrets.GH_APP_PRIVATE_KEY != '' }}
        id: app-token
        continue-on-error: true
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          installation-id: ${{ secrets.GH_INSTALLATION_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Create docs-sync pull request
        if: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          branch: docs-sync/sec-review
          base: ${{ github.ref_name }}
          title: "[skip docsync] chore(docs): append DS-21 sec-review result"
          commit-message: "docs(report): append DS-21 sec-review row"
          add-paths: docs/agile/report.md
          labels: "docsync:needs-apply"
          delete-branch: true

  report-failure:
    needs: [run-on-main]
    if: ${{ needs.run-on-main.result == 'failure' && ((github.event_name == 'push' && github.ref_name == 'main') || (github.event_name == 'workflow_dispatch' && github.ref_name == 'main')) }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Open triage issue on failure
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const refName = process.env.GITHUB_REF_NAME || context.ref?.split('/')?.pop() || 'unknown';
            const title = `security-permissions-lint failed on ${refName}`;
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = `Run: ${runUrl}`;

            const openIssues = await github.paginate(
              github.rest.issues.listForRepo,
              {
                owner,
                repo,
                state: 'open',
                labels: 'triage:urgent',
                per_page: 100,
              },
              (response) => response.data
            );

            if (!openIssues.some((issue) => issue.title === title)) {
              await github.rest.issues.create({ owner, repo, title, body, labels: ['triage:urgent'] });
              core.info('Created triage:urgent issue');
            } else {
              core.info('triage:urgent issue already open; skipping create');
            }

  report-success:
    needs: [run-on-main]
    if: ${{ needs.run-on-main.result == 'success' && ((github.event_name == 'push' && github.ref_name == 'main') || (github.event_name == 'workflow_dispatch' && github.ref_name == 'main')) }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Close triage issue on recovery
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const refName = process.env.GITHUB_REF_NAME || context.ref?.split('/')?.pop() || 'unknown';
            const title = `security-permissions-lint failed on ${refName}`;

            const openIssues = await github.paginate(
              github.rest.issues.listForRepo,
              {
                owner,
                repo,
                state: 'open',
                labels: 'triage:urgent',
                per_page: 100,
              },
              (response) => response.data
            );

            for (const issue of openIssues.filter((entry) => entry.title === title)) {
              await github.rest.issues.update({ owner, repo, issue_number: issue.number, state: 'closed' });
              core.info(`Closed issue #${issue.number}`);
            }
