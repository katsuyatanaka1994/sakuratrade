name: status-compat

permissions:
  contents: read
  statuses: write

on:
  workflow_run:
    workflows:
      - docs-index-validate
      - nfr-xref
      - security-permissions-lint
    types:
      - completed

concurrency:
  group: status-compat-${{ github.event.workflow_run.id }}
  cancel-in-progress: false

jobs:
  compat:
    if: >-
      ${{
        (github.event.workflow_run.event == 'pull_request' || github.event.workflow_run.event == 'workflow_dispatch') &&
        github.event.workflow_run.repository.id == github.repository_id &&
        !github.event.workflow_run.head_repository.fork
      }}
    runs-on: ubuntu-latest
    steps:
      - name: Emit fixed commit status
        uses: actions/github-script@v7
        with:
          script: |
            const wr = context.payload.workflow_run;
            const { owner, repo } = context.repo;
            const sha = wr.head_sha;

            let prs = wr.pull_requests || [];
            if (!prs.length) {
              const res = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner,
                repo,
                commit_sha: sha,
              });
              prs = (res.data || []).filter(p => p.state === 'open');
            }

            if (!prs.length) {
              core.info(`no open PR for ${sha}, skip status emit`);
              return;
            }

            const ctxMap = {
              'docs-index-validate': 'docs-index-validate (pull_request)',
              'nfr-xref': 'nfr-xref (pull_request)',
              'security-permissions-lint': 'security-permissions-lint (pull_request)',
            };
            const contextName = ctxMap[wr.name];
            if (!contextName) {
              core.info(`No context mapping for workflow ${wr.name}`);
              return;
            }

            const conclusion = (wr.conclusion || '').toLowerCase();
            const successStates = new Set(['success','skipped','neutral','stale']);
            const failureStates = new Set(['failure','timed_out','cancelled','action_required']);
            let state = 'pending';
            if (successStates.has(conclusion)) {
              state = 'success';
            } else if (failureStates.has(conclusion)) {
              state = 'failure';
            } else {
              core.warning(`Unexpected conclusion: ${conclusion}; defaulting to pending`);
            }

            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state,
              context: contextName,
              description: `status-compat: ${wr.name} -> ${state}`,
            });

            const summaryLine = `status-compat: PR #${prs[0].number} ctx=${contextName} state=${state}`;
            core.info(summaryLine);
            await core.summary.addRaw(summaryLine + '\n').write();
