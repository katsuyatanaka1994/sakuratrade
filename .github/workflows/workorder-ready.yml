name: workorder-ready

on:
  workflow_dispatch:
    inputs:
      base:
        description: 'Base branch for Implementation Draft PR (default: docs-sync/plan)'
        required: false
      plan_branch:
        description: 'Plan branch to read tasks from (default: docs-sync/plan)'
        required: false
  workflow_run:
    workflows: ['plan-sync/Validate']
    types: [completed]
  push:
    branches:
      - main
    paths:
      - docs/agile/plan.md

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  ready:
    name: workorder-ready
    concurrency:
      group: docs-sync:workorder
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Resolve run context
        id: context
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const set = (key, value) => core.setOutput(key, value ?? '');
            const event = context.eventName;

            if (event === 'workflow_dispatch') {
              const baseInput = core.getInput('base') || 'docs-sync/plan';
              const planBranchInput = core.getInput('plan_branch') || baseInput;
              set('should_run', 'true');
              set('checkout_ref', `refs/heads/${planBranchInput}`);
              set('plan_branch', planBranchInput);
              set('pr_base', baseInput);
              set('trigger', 'workflow_dispatch');
              return;
            }

            if (event === 'workflow_run') {
              const run = context.payload.workflow_run;
              if (!run || run.conclusion !== 'success') {
                set('should_run', 'false');
                set('reason', 'upstream workflow not successful');
                return;
              }

              const trigger = run.event || 'workflow_run';
              const planBranch = 'docs-sync/plan';
              if (run.head_branch === 'docs-sync/workorder') {
                core.info('Skipping workorder-ready: ignore docs-sync/workorder self-trigger.');
                set('should_run', 'false');
                set('reason', 'docs-sync/workorder self-trigger');
                return;
              }

              const prInfo = Array.isArray(run.pull_requests) && run.pull_requests[0] ? run.pull_requests[0] : null;

              if (trigger === 'pull_request_target') {
                if (!prInfo) {
                  set('should_run', 'false');
                  set('reason', 'workflow_run missing associated pull request');
                  return;
                }

                const prNumber = Number(prInfo.number);
                const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
                const hasPlanSync = (pr.data.labels || []).some((label) => label?.name === 'plan:sync');
                if (!hasPlanSync) {
                  core.info(`Skipping workorder-ready: PR #${prNumber} missing plan:sync label.`);
                  set('should_run', 'false');
                  set('reason', 'source PR missing plan:sync label');
                  return;
                }
                if (pr.data.head?.ref === 'docs-sync/workorder') {
                  core.info('Skipping workorder-ready: docs-sync/workorder PR should not trigger workorder sync.');
                  set('should_run', 'false');
                  set('reason', 'source PR head is docs-sync/workorder');
                  return;
                }

                set('should_run', 'true');
                set('checkout_ref', `refs/heads/${planBranch}`);
                set('plan_branch', planBranch);
                set('pr_base', planBranch);
                set('source_pr', String(prNumber));
                set('source_head', pr.data.head?.ref ?? '');
                set('trigger', `plan-sync:${trigger}`);
                return;
              }

              if (trigger === 'workflow_dispatch' || trigger === 'issue_comment') {
                set('should_run', 'true');
                set('checkout_ref', `refs/heads/${planBranch}`);
                set('plan_branch', planBranch);
                set('pr_base', planBranch);
                set('source_pr', prInfo ? String(prInfo.number) : '');
                set('source_head', prInfo?.head_branch || '');
                set('trigger', `plan-sync:${trigger}`);
                return;
              }

              set('should_run', 'false');
              set('reason', `unsupported workflow_run event: ${trigger}`);
              return;
            }

            if (event === 'push') {
              const ref = context.ref || '';
              if (!ref.startsWith('refs/heads/')) {
                set('should_run', 'false');
                set('reason', 'unsupported ref type');
                return;
              }
              const branch = ref.replace('refs/heads/', '');
              set('should_run', 'true');
              set('checkout_ref', ref);
              set('plan_branch', branch);
              set('pr_base', branch);
              set('trigger', 'push');
              return;
            }

            set('should_run', 'false');
            set('reason', `unsupported event: ${event}`);

      - name: Skip (no action required)
        if: steps.context.outputs.should_run != 'true'
        run: |
          echo "workorder-ready skipped: ${{ steps.context.outputs.reason || 'condition not met' }}"

      - name: Create GitHub App token
        if: steps.context.outputs.should_run == 'true'
        id: app-token
        continue-on-error: true
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_APP_ID }}
          owner: ${{ github.repository_owner }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Checkout target revision
        if: steps.context.outputs.should_run == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.context.outputs.checkout_ref }}
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token || github.token }}

      - name: Configure git user
        if: steps.context.outputs.should_run == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create workorder branch
        if: steps.context.outputs.should_run == 'true'
        run: |
          git checkout -B docs-sync/workorder

      - name: Setup Python
        if: steps.context.outputs.should_run == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        if: steps.context.outputs.should_run == 'true'
        run: |
          python3 -m pip install --upgrade pip
          pip install PyYAML==6.0.2

      - name: Sync workorder metadata
        if: steps.context.outputs.should_run == 'true'
        id: sync
        run: |
          set -euo pipefail
          python3 scripts/workorder_cli.py ready

      - name: Show workorder_sync_plan
        if: steps.context.outputs.should_run == 'true'
        run: |
          if [ -f workorder_sync_plan.json ]; then
            cat workorder_sync_plan.json
          fi

      - name: Detect workorder changes
        if: steps.context.outputs.should_run == 'true'
        id: changes
        run: |
          set -euo pipefail
          if git diff --quiet -- docs/agile/workorder.md workorder_sync_plan.json; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment no-op result
        if: steps.context.outputs.should_run == 'true' && steps.changes.outputs.changed != 'true' && steps.context.outputs.source_pr != ''
        uses: actions/github-script@v7
        env:
          SOURCE_PR: ${{ steps.context.outputs.source_pr }}
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.SOURCE_PR),
              body: 'ℹ️ workorder-ready を実行しましたが、自動更新はありませんでした (No-Op)。'
            });

      - name: Create / update workorder PR
        if: steps.context.outputs.should_run == 'true' && steps.changes.outputs.changed == 'true'
        id: create-pr
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || github.token }}
        run: |
          set -euo pipefail
          git add docs/agile/workorder.md workorder_sync_plan.json
          if git diff --cached --quiet; then
            echo "No workorder changes to commit"
            exit 0
          fi
          git commit -m "chore(workorder): sync workorder AUTO sections"
          git push --force-with-lease origin docs-sync/workorder
          SNAPSHOT=$(python3 -c 'import json;print(json.load(open("workorder_sync_plan.json","r",encoding="utf-8"))["plan_snapshot_id"])')
          TASKS=$(python3 -c 'import json;data=json.load(open("workorder_sync_plan.json","r",encoding="utf-8"));print(", ".join(data.get("task_ids", [])))')
          TRIGGER="${{ steps.context.outputs.trigger }}"
          SOURCE_HEAD="${{ steps.context.outputs.source_head || '' }}"
          python3 -c 'import sys;from pathlib import Path;trigger,head,snapshot,tasks=sys.argv[1:5];lines=["Automated workorder sync run.","",f"- Trigger: {trigger}"];\
lines.append(f"- Source ref: `{head}`") if head else None;\
lines.append(f"- plan_snapshot_id: {snapshot}") if snapshot else None;\
lines.append(f"- Tasks: {tasks}") if tasks else None;\
Path("/tmp/workorder-body.txt").write_text("\n".join(lines)+"\n",encoding="utf-8")' "$TRIGGER" "$SOURCE_HEAD" "$SNAPSHOT" "$TASKS"
          if gh pr view docs-sync/workorder >/dev/null 2>&1; then
            gh pr edit docs-sync/workorder \
              --title "[workorder-ready] docs: sync workorder auto sections" \
              --body-file /tmp/workorder-body.txt \
              --base ${{ steps.context.outputs.pr_base }}
          else
            gh pr create \
              --draft \
              --title "[workorder-ready] docs: sync workorder auto sections" \
              --body-file /tmp/workorder-body.txt \
              --base ${{ steps.context.outputs.pr_base }} \
              --head docs-sync/workorder
          fi

      - name: Comment PR link
        if: steps.context.outputs.should_run == 'true' && steps.context.outputs.source_pr != '' && steps.changes.outputs.changed == 'true'
        uses: actions/github-script@v7
        env:
          SOURCE_PR: ${{ steps.context.outputs.source_pr }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const headRef = `${owner}:docs-sync/workorder`;
            const prs = await github.rest.pulls.list({ owner, repo, head: headRef, state: 'open', per_page: 1 });
            if (!prs.data.length) {
              console.log('No workorder-ready PR to comment');
              return;
            }
            const url = prs.data[0].html_url;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: Number(process.env.SOURCE_PR),
              body: `🛠️ workorder-ready: ${url}`,
            });

      - name: Note no-op in logs
        if: steps.context.outputs.should_run == 'true' && steps.changes.outputs.changed != 'true'
        run: echo "workorder-ready completed without changes"
